generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  name       String?
  password   String
  image      String?
  role       String?   @default("usuario")
  profileId  String?
  sucursalId String?
  username   String?   @unique
  status     String?   @default("activo")
  Profile    Profile?  @relation(fields: [profileId], references: [id])
  Sucursal   Sucursal? @relation(fields: [sucursalId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Sucursal {
  id        String   @id @default(cuid())
  nombre    String
  User      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id              String   @id @default(cuid())
  nombre          String
  enabledFeatures Json
  User            User[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Departamento {
  id        String   @id @default(cuid())
  nombre    String
  Prueba    Prueba[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Muestra {
  id             String   @id @default(cuid())
  clave          String
  descripcion    String
  nombreTubo     String
  barCode        Boolean  @default(false)
  excludeStatus  Boolean  @default(false)
  observaciones  String   @default("")
  startAsPending Boolean  @default(false)
  Prueba         Prueba[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Metodo {
  id        String   @id @default(cuid())
  nombre    String
  Prueba    Prueba[]
  Perfil    Perfil[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Prueba {
  id                   String       @id @default(cuid())
  codigo               String
  abreviatura          String
  descripcion          String
  titulo               String
  hojaTrabajo          String
  formula              String
  unidades             String
  sexo                 String
  tipoResultado        String
  resultadoDefault     String
  valorTipo            String
  decimales            Int
  indicaciones         String
  notas                String
  notasInternas        String
  tipoValorNormalidad  String
  valorNormalidadTexto String
  ventaIndividual      Boolean      @default(false)
  permitirAntibiograma Boolean      @default(false)
  printMetodo          String
  printBold            String
  printNotas           String
  departamento         Departamento @relation(fields: [departamentoId], references: [id])
  departamentoId       String
  metodo               Metodo       @relation(fields: [metodoId], references: [id])
  metodoId             String
  muestra              Muestra      @relation(fields: [muestraId], references: [id])
  muestraId            String
  valoresRangos        Json?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

model Tarifa {
  id          String        @id @default(cuid())
  nombre      String
  descripcion String
  isDefault   Boolean       @default(false)
  Cliente     Cliente[]
  Orden       Orden[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ItemsTarifa ItemsTarifa[]
}

model Medico {
  id           String   @id @default(cuid())
  nombre       String
  especialidad String
  telefono     String
  email        String
  Orden        Orden[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Cliente {
  id          String     @id @default(cuid())
  abreviatura String
  nombre      String
  email       String
  telefono    String
  direccion   String
  tipo        String
  rfc         String
  tarifa      Tarifa     @relation(fields: [tarifaId], references: [id])
  tarifaId    String
  Paciente    Paciente[]
  Orden       Orden[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Paciente {
  id              String   @id @default(cuid())
  clave           String   @unique
  nombre          String
  apellidos       String
  genero          String
  fechaNacimiento DateTime
  celular         String
  emailResultados String
  direccion       String
  comentarios     String?
  tutor           String?
  cliente         Cliente  @relation(fields: [clienteId], references: [id])
  clienteId       String
  Orden           Orden[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Orden {
  id               String         @id @default(cuid())
  orderGenerator   OrderGenerator @relation(fields: [orderGeneratorId], references: [id])
  orderGeneratorId String
  cliente          Cliente        @relation(fields: [clienteId], references: [id])
  clienteId        String
  paciente         Paciente       @relation(fields: [pacienteId], references: [id])
  pacienteId       String
  medico           Medico?        @relation(fields: [medicoId], references: [id])
  medicoId         String
  tarifa           Tarifa?        @relation(fields: [tarifaId], references: [id])
  tarifaId         String
  fecha            DateTime
  tipo             String
  status           String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model OrderGenerator {
  id        String   @id @default(cuid())
  sucId     String
  consec    Int      @default(autoincrement())
  Orden     Orden[]
  createdAt DateTime
  updatedAt DateTime
}

model Perfil {
  id              String   @id @default(cuid())
  codigo          String
  abreviatura     String
  descripcion     String
  titulo          String
  metodo          Metodo   @relation(fields: [metodoId], references: [id])
  metodoId        String
  ventaIndividual Boolean  @default(false)
  sexo            String
  notas           String
  notasInternas   String
  alineacion      String
  testsToDo       Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Items {
  id          String        @id @default(cuid())
  name        String
  tipo        String
  ItemsTarifa ItemsTarifa[]
}

model ItemsTarifa {
  id        String   @id @default(cuid())
  tarifa    Tarifa   @relation(fields: [tarifaId], references: [id])
  tarifaId  String
  item      Items    @relation(fields: [itemId], references: [id])
  itemId    String
  precio    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
