generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  name       String?
  password   String
  image      String?
  role       String?   @default("usuario")
  profileId  String?
  sucursalId String?
  username   String?   @unique
  status     String?   @default("activo")
  Profile    Profile?  @relation(fields: [profileId], references: [id])
  Sucursal   Sucursal? @relation(fields: [sucursalId], references: [id])
}

model Sucursal {
  id     String @id @default(cuid())
  nombre String
  User   User[]
}

model Profile {
  id              String @id @default(cuid())
  nombre          String
  enabledFeatures Json
  User            User[]
}

model Departamento {
  id     String   @id @default(cuid())
  nombre String
  Prueba Prueba[]
}

model Muestra {
  id             String   @id @default(cuid())
  clave          String
  descripcion    String
  nombreTubo     String
  barCode        Boolean  @default(false)
  excludeStatus  Boolean  @default(false)
  observaciones  String   @default("")
  startAsPending Boolean  @default(false)
  Prueba         Prueba[]
}

model Metodo {
  id     String   @id @default(cuid())
  nombre String
  Prueba Prueba[]
}

model Prueba {
  id                   String       @id @default(cuid())
  codigo               String
  abreviatura          String
  descripcion          String
  titulo               String
  hojaTrabajo          String
  formula              String
  unidades             String
  sexo                 String
  tipoResultado        String
  resultadoDefault     String
  valorTipo            String
  decimales            Int
  indicaciones         String
  notas                String
  notasInternas        String
  tipoValorNormalidad  String
  valorNormalidadTexto String
  ventaIndividual      Boolean      @default(false)
  permitirAntibiograma Boolean      @default(false)
  printMetodo          String
  printBold            String
  printNotas           String
  departamento         Departamento @relation(fields: [departamentoId], references: [id])
  departamentoId       String
  metodo               Metodo       @relation(fields: [metodoId], references: [id])
  metodoId             String
  muestra              Muestra      @relation(fields: [muestraId], references: [id])
  muestraId            String
  valoresRangos        Json?
}

model Tarifa {
  id          String    @id @default(cuid())
  nombre      String
  descripcion String
  isDefault   Boolean   @default(false)
  Cliente     Cliente[]
}

model Medico {
  id           String @id @default(cuid())
  nombre       String
  especialidad String
  telefono     String
  email        String
}

model Cliente {
  id          String     @id @default(cuid())
  abreviatura String
  nombre      String
  email       String
  telefono    String
  direccion   String
  tipo        String
  rfc         String
  tarifa      Tarifa     @relation(fields: [tarifaId], references: [id])
  tarifaId    String
  Paciente    Paciente[]
}

model Paciente {
  id              String   @id @default(cuid())
  clave           String   @unique
  nombre          String
  apellidos       String
  genero          String
  fechaNacimiento DateTime
  celular         String
  emailResultados String
  direccion       String
  comentarios     String?
  tutor           String?
  cliente         Cliente  @relation(fields: [clienteId], references: [id])
  clienteId       String
}
